#!/usr/bin/env python3
#!/usr/bin/env python3
"""
Turnus Set Database Creation Script

Creates turnus sets in the database from existing JSON files generated by shiftscraper.py.
This script handles the database operations part of the turnus workflow, working with both
SQLite (development) and MySQL (production) databases.

WORKFLOW:
    1. Run shiftscraper.py to generate JSON files from PDF
    2. Run this script to import JSON data into database
    3. Activate turnus set in admin panel

FEATURES:
    - Automatically creates database tables if they don't exist
    - Works with both SQLite (dev) and MySQL (production)
    - Auto-generates statistics JSON if missing
    - Validates JSON file existence before processing
    - Creates turnus set and imports all shifts
    - Provides clear error messages and progress feedback

USAGE:
    Command Line:
        python app/utils/create_new_turnus_year_in_database.py R23 "OSL Train Shifts 2023"
        python app/utils/create_new_turnus_year_in_database.py R24 "OSL Train Shifts 2024" --json-path custom/path.json
    
    From utils directory:
        python create_new_turnus_year_in_database.py R23 "OSL Train Shifts 2023"

ARGUMENTS:
    year_id (required): Year identifier (e.g., R23, R24, R25)
    name (required): Human-readable name for the turnus set
    --json-path (optional): Custom path to turnuser_XX.json file
    --df-path (optional): Custom path to turnus_df_XX.json file

FILE LOCATIONS:
    Default JSON location: app/static/turnusfiler/{year_id}/turnuser_{year_id}.json
    Default stats location: app/static/turnusfiler/{year_id}/turnus_df_{year_id}.json

DATABASE OPERATIONS:
    - Creates turnus_sets table entry with file paths
    - Imports all shift names from JSON into shifts table
    - Links shifts to the specific turnus set
    - Sets turnus set as inactive by default (activate manually)

EXAMPLES:
    # Basic usage (files in turnusfiler directory)
    python app/utils/create_new_turnus_year_in_database.py R23 "OSL Train Shifts 2023"
    
    # With custom file paths
    python app/utils/create_new_turnus_year_in_database.py R24 "OSL Train Shifts 2024" \\
        --json-path /path/to/turnuser_R24.json \\
        --df-path /path/to/turnus_df_R24.json

ERROR HANDLING:
    - Validates JSON file existence
    - Creates database tables if missing
    - Generates statistics JSON if missing
    - Provides clear error messages for troubleshooting

REQUIREMENTS:
    - JSON files must be generated by shiftscraper.py first
    - Database must be accessible (SQLite file or MySQL connection)
    - Proper database configuration in config.ini
"""

import sys
import os
import time
import argparse

# Add the project root to Python path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

# Now we can import from app
from app.utils.db_utils import create_turnus_set, add_shifts_to_turnus_set, get_turnus_set_by_year, update_turnus_set_paths, create_tables
from app.utils.shift_stats import Turnus
from config import conf

def create_new_turnus(year_id, name, turnus_json_path=None, df_json_path=None):
    """Create turnus set in database from existing JSON files"""
    
    print(f"🚀 Creating new turnus set: {year_id}")

     # Ensure database tables exist
    print(f"🗄️  Ensuring database tables exist...")
    try:
        create_tables()
        print(f"✅ Database tables ready")
    except Exception as e:
        print(f"❌ Error creating database tables: {e}")
        return False
    
    # If no paths provided, try to find files in turnusfiler directory
    if not turnus_json_path or not df_json_path:
        turnusfiler_dir = os.path.join(conf.static_dir, 'turnusfiler', year_id.lower())
        
        if not turnus_json_path:
            turnus_json_path = os.path.join(turnusfiler_dir, f'turnuser_{year_id}.json')
        
        if not df_json_path:
            df_json_path = os.path.join(turnusfiler_dir, f'turnus_df_{year_id}.json')
    
    # Validate that JSON files exist
    if not os.path.exists(turnus_json_path):
        print(f"❌ Turnus JSON file not found: {turnus_json_path}")
        print(f"💡 Run shiftscraper.py first to generate the JSON file")
        return False
    
    if not os.path.exists(df_json_path):
        print(f"⚠️  Statistics JSON file not found: {df_json_path}")
        print(f"📊 Generating statistics from turnus JSON...")
        
        # Generate statistics file
        try:
            stats = Turnus(turnus_json_path)
            stats.stats_df.to_json(df_json_path)
            print(f"✅ Created statistics JSON: {df_json_path}")
        except Exception as e:
            print(f"❌ Error generating statistics: {e}")
            return False
    
    # 1. Create turnus set in database with file paths
    success, message = create_turnus_set(
        name, 
        year_id, 
        is_active=False,
        turnus_file_path=turnus_json_path,
        df_file_path=df_json_path
    )
    if not success:
        print(f"❌ Database error: {message}")
        return False
    print(f"✅ Created turnus set in database")
    
    # 2. Add shifts to database
    turnus_set = get_turnus_set_by_year(year_id)
    if turnus_set:
        success = add_shifts_to_turnus_set(turnus_json_path, turnus_set['id'])
        if success:
            print(f"✅ Added shifts to database")
        else:
            print(f"❌ Failed to add shifts to database")
            return False
    else:
        print(f"❌ Could not find turnus set {year_id} in database")
        return False
    
    print(f"🎉 Turnus set {year_id} created successfully!")
    print(f"💾 Database updated with turnus set ID: {turnus_set['id']}")
    print(f"📂 Using files:")
    print(f"   📄 {turnus_json_path}")
    print(f"   📊 {df_json_path}")
    
    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Create new turnus set in database from existing JSON files')
    parser.add_argument('year_id', help='Year identifier (e.g., R26)')
    parser.add_argument('name', help='Turnus set name (e.g., "OSL Train Shifts 2026")')
    parser.add_argument('--json-path', help='Path to turnus JSON file (default: turnusfiler/year_id/turnuser_year_id.json)')
    parser.add_argument('--df-path', help='Path to statistics JSON file (default: turnusfiler/year_id/turnus_df_year_id.json)')
    
    args = parser.parse_args()
    
    # Show database type being used
    db_type = conf.CONFIG.get('general', 'db_type', fallback='sqlite')
    print(f"🗄️  Using {db_type.upper()} database")
    
    success = create_new_turnus(
        args.year_id.upper(), 
        args.name, 
        args.json_path,
        args.df_path
    )
    
    if success:
        print(f"\n✅ Success! Turnus set {args.year_id.upper()} is ready to use.")
        print(f"💡 You can now activate it in the admin panel or set it as active.")
    else:
        print(f"\n❌ Failed to create turnus set {args.year_id.upper()}")
        sys.exit(1)